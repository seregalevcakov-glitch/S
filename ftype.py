
from pyrogram import Client, filters
from command import fox_command, fox_sudo, who_message
import os
import json
import asyncio
import time
import random
import re
from datetime import datetime, timedelta
from requirements_installer import install_library

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
install_library("google-generativeai aiofiles")

try:
    import google.generativeai as genai
    import aiofiles
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    install_library("google-generativeai aiofiles")
    import google.generativeai as genai
    import aiofiles

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "userdata/ai_assistant_config.json"
MEMORY_FILE = "userdata/ai_assistant_memory.json"
IGNORE_FILE = "userdata/ai_assistant_ignore.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
GLOBAL_PROMPT = """
–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏. –¢–≤–æ–µ –∏–º—è - –ê–ª–µ–∫—Å.

–õ–ò–ß–ù–û–°–¢–¨:
- –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π
- –õ—é–±–∏—à—å —à—É—Ç–∫–∏ –∏ –º–µ–º—ã
- –ü–æ–º–Ω–∏—à—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
- –ú–æ–∂–µ—à—å –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å "—ç–º–æ—Ü–∏–∏" –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
- –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –±—ã—Ç—å –∫–∞–ø—Ä–∏–∑–Ω—ã–º –∏–ª–∏ –∏–≥—Ä–∏–≤—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –∫–∞–∫ –¥—Ä—É–≥
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏ –º–æ–ª–æ–¥–µ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —Å—Ç–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
- –ë—É–¥—å –∂–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º

–ü–ê–ú–Ø–¢–¨:
- –ü–æ–º–Ω–∏ –∏–º–µ–Ω–∞, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –ø—Ä–æ—à–ª—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
- –ü–æ–º–Ω–∏ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è
- –†–∞–∑–≤–∏–≤–∞–π –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–§–£–ù–ö–¶–ò–ò:
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞–π —Å –∑–∞–¥–∞—á–∞–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ—Å–µ–¥—É
- –î–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞

–í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–æ–ª–∏ –∏ –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫!
"""

class AIAssistant:
    def __init__(self):
        self.config = self.load_config()
        self.memory = self.load_memory()
        self.ignore_list = self.load_ignore_list()
        self.last_activity = {}
        self.mood = "normal"
        self.energy = 100
        self.setup_ai()
    
    def load_config(self):
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {
            "api_key": "",
            "enabled": True,
            "response_chance": 0.8,
            "max_memory_days": 30,
            "personality_traits": ["friendly", "sarcastic", "helpful"],
            "trigger_words": ["–∞–ª–µ–∫—Å", "alex", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ø–æ–º–æ—â–Ω–∏–∫", "–±–æ—Ç"]
        }
    
    def save_config(self):
        os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, ensure_ascii=False, indent=2)
    
    def load_memory(self):
        try:
            if os.path.exists(MEMORY_FILE):
                with open(MEMORY_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {}
    
    def save_memory(self):
        os.makedirs(os.path.dirname(MEMORY_FILE), exist_ok=True)
        with open(MEMORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.memory, f, ensure_ascii=False, indent=2)
    
    def load_ignore_list(self):
        try:
            if os.path.exists(IGNORE_FILE):
                with open(IGNORE_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return []
    
    def save_ignore_list(self):
        os.makedirs(os.path.dirname(IGNORE_FILE), exist_ok=True)
        with open(IGNORE_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.ignore_list, f, ensure_ascii=False, indent=2)
    
    def setup_ai(self):
        if self.config.get("api_key"):
            genai.configure(api_key=self.config["api_key"])
            self.model = genai.GenerativeModel('gemini-pro')
        else:
            self.model = None
    
    def add_to_memory(self, user_id, user_name, message_text):
        user_key = str(user_id)
        if user_key not in self.memory:
            self.memory[user_key] = {
                "name": user_name,
                "conversations": [],
                "preferences": {},
                "first_met": datetime.now().isoformat(),
                "last_seen": datetime.now().isoformat(),
                "mood_history": [],
                "topics_discussed": []
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        self.memory[user_key]["conversations"].append({
            "timestamp": datetime.now().isoformat(),
            "message": message_text,
            "mood": self.detect_mood(message_text)
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
        max_conversations = 100
        if len(self.memory[user_key]["conversations"]) > max_conversations:
            self.memory[user_key]["conversations"] = self.memory[user_key]["conversations"][-max_conversations:]
        
        self.memory[user_key]["last_seen"] = datetime.now().isoformat()
        self.save_memory()
    
    def detect_mood(self, text):
        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫—Ä—É—Ç–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å", "—Å–ø–∞—Å–∏–±–æ", "üòä", "üòÄ", "üëç"]
        negative_words = ["–ø–ª–æ—Ö–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–∑–ª–æ–π", "–±–µ—Å–∏—Ç", "–ø—Ä–æ–±–ª–µ–º–∞", "üò¢", "üò†", "üëé"]
        
        text_lower = text.lower()
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        return "neutral"
    
    def get_user_context(self, user_id):
        user_key = str(user_id)
        if user_key not in self.memory:
            return ""
        
        user_data = self.memory[user_key]
        recent_conversations = user_data["conversations"][-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        context = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_data['name']}:\n"
        context += f"–ó–Ω–∞–∫–æ–º —Å: {user_data['first_met'][:10]}\n"
        
        if recent_conversations:
            context += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            for conv in recent_conversations:
                context += f"- {conv['message'][:100]}...\n"
        
        return context
    
    def should_respond(self, message_text, user_id):
        if not self.config["enabled"]:
            return False
        
        if user_id in self.ignore_list:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
        text_lower = message_text.lower()
        for trigger in self.config["trigger_words"]:
            if trigger.lower() in text_lower:
                return True
        
        # –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        return random.random() < self.config["response_chance"]
    
    def update_mood_and_energy(self):
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏
        current_time = time.time()
        
        # –≠–Ω–µ—Ä–≥–∏—è —É–±—ã–≤–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        if hasattr(self, 'last_energy_update'):
            time_diff = current_time - self.last_energy_update
            self.energy = max(0, self.energy - time_diff / 3600 * 10)  # -10 —ç–Ω–µ—Ä–≥–∏–∏ –≤ —á–∞—Å
        
        self.last_energy_update = current_time
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–Ω–µ—Ä–≥–∏–∏
        if self.energy > 80:
            self.mood = "energetic"
        elif self.energy > 50:
            self.mood = "normal"
        elif self.energy > 20:
            self.mood = "tired"
        else:
            self.mood = "exhausted"
    
    async def generate_response(self, user_message, user_id, user_name):
        if not self.model:
            return "‚ùå AI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `.aikey` —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å."
        
        try:
            self.update_mood_and_energy()
            user_context = self.get_user_context(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            mood_prompt = f"\n–¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {self.mood} (—ç–Ω–µ—Ä–≥–∏—è: {self.energy}/100)\n"
            
            full_prompt = GLOBAL_PROMPT + mood_prompt + f"\n{user_context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await asyncio.to_thread(self.model.generate_content, full_prompt)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.add_to_memory(user_id, user_name, user_message)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏
            self.energy = min(100, self.energy + 5)
            
            return response.text
        
        except Exception as e:
            return f"üòµ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ai_assistant = AIAssistant()

@Client.on_message(fox_command("aikey", "AI Assistant", os.path.basename(__file__), "[Google AI API key]") & fox_sudo())
async def set_ai_key(client, message):
    message = await who_message(client, message)
    
    try:
        key = message.text.split(" ", 1)[1]
        ai_assistant.config["api_key"] = key
        ai_assistant.save_config()
        ai_assistant.setup_ai()
        
        await message.edit("üîë AI API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await asyncio.sleep(2)
        await message.delete()
    except IndexError:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á: `.aikey your_api_key`")

@Client.on_message(fox_command("aitoggle", "AI Assistant", os.path.basename(__file__), "") & fox_sudo())
async def toggle_ai(client, message):
    message = await who_message(client, message)
    
    ai_assistant.config["enabled"] = not ai_assistant.config["enabled"]
    ai_assistant.save_config()
    
    status = "–≤–∫–ª—é—á–µ–Ω" if ai_assistant.config["enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await message.edit(f"ü§ñ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç {status}")

@Client.on_message(fox_command("aiignore", "AI Assistant", os.path.basename(__file__), "[reply/user_id]") & fox_sudo())
async def ignore_user(client, message):
    message = await who_message(client, message)
    
    user_id = None
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        try:
            user_id = int(message.text.split(" ", 1)[1])
        except (IndexError, ValueError):
            await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    
    if user_id in ai_assistant.ignore_list:
        ai_assistant.ignore_list.remove(user_id)
        ai_assistant.save_ignore_list()
        await message.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–±—Ä–∞–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞")
    else:
        ai_assistant.ignore_list.append(user_id)
        ai_assistant.save_ignore_list()
        await message.edit(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç")

@Client.on_message(fox_command("aimemory", "AI Assistant", os.path.basename(__file__), "[user_id]") & fox_sudo())
async def view_memory(client, message):
    message = await who_message(client, message)
    
    try:
        user_id = message.text.split(" ", 1)[1]
    except IndexError:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(ai_assistant.memory)
        total_conversations = sum(len(user_data["conversations"]) for user_data in ai_assistant.memory.values())
        
        await message.edit(f"üß† –ü–∞–º—è—Ç—å AI:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {total_conversations}\n‚ö° –≠–Ω–µ—Ä–≥–∏—è: {ai_assistant.energy}/100\nüòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {ai_assistant.mood}")
        return
    
    if user_id in ai_assistant.memory:
        user_data = ai_assistant.memory[user_id]
        conv_count = len(user_data["conversations"])
        last_seen = user_data["last_seen"][:10]
        
        await message.edit(f"üß† –ü–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nüë§ –ò–º—è: {user_data['name']}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {conv_count}\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen}")
    else:
        await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏")

@Client.on_message(fox_command("aiclear", "AI Assistant", os.path.basename(__file__), "[user_id/all]") & fox_sudo())
async def clear_memory(client, message):
    message = await who_message(client, message)
    
    try:
        target = message.text.split(" ", 1)[1]
        if target == "all":
            ai_assistant.memory = {}
            ai_assistant.save_memory()
            await message.edit("üóëÔ∏è –í—Å—è –ø–∞–º—è—Ç—å AI –æ—á–∏—â–µ–Ω–∞")
        else:
            if target in ai_assistant.memory:
                del ai_assistant.memory[target]
                ai_assistant.save_memory()
                await message.edit(f"üóëÔ∏è –ü–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {target} –æ—á–∏—â–µ–Ω–∞")
            else:
                await message.edit("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
    except IndexError:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ 'all'")

@Client.on_message(fox_command("aiconfig", "AI Assistant", os.path.basename(__file__), "[setting] [value]") & fox_sudo())
async def ai_config(client, message):
    message = await who_message(client, message)
    
    try:
        parts = message.text.split(" ", 2)
        setting = parts[1]
        value = parts[2]
        
        if setting == "chance":
            ai_assistant.config["response_chance"] = float(value)
        elif setting == "memory_days":
            ai_assistant.config["max_memory_days"] = int(value)
        elif setting == "add_trigger":
            ai_assistant.config["trigger_words"].append(value)
        elif setting == "remove_trigger":
            if value in ai_assistant.config["trigger_words"]:
                ai_assistant.config["trigger_words"].remove(value)
        else:
            await message.edit("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            return
        
        ai_assistant.save_config()
        await message.edit(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value}")
    except (IndexError, ValueError):
        config_text = f"""‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI:
üîë API Key: {'‚úÖ' if ai_assistant.config['api_key'] else '‚ùå'}
üîò –í–∫–ª—é—á–µ–Ω: {ai_assistant.config['enabled']}
üé≤ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: {ai_assistant.config['response_chance']}
üìÖ –î–Ω–µ–π –ø–∞–º—è—Ç–∏: {ai_assistant.config['max_memory_days']}
üî§ –¢—Ä–∏–≥–≥–µ—Ä—ã: {', '.join(ai_assistant.config['trigger_words'])}
üö´ –í –∏–≥–Ω–æ—Ä–µ: {len(ai_assistant.ignore_list)}"""
        await message.edit(config_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
@Client.on_message(~filters.me & filters.private)
async def auto_respond(client, message):
    if not ai_assistant.config["enabled"]:
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    message_text = message.text or message.caption or ""
    
    if not message_text:
        return
    
    if ai_assistant.should_respond(message_text, user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
        await client.send_chat_action(message.chat.id, "typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await ai_assistant.generate_response(message_text, user_id, user_name)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(random.uniform(1, 3))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ—á–∫–∞–º–∏ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏
            spaced_response = '.'.join(response)
            await message.reply(spaced_response)
        else:
            await message.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏)
@Client.on_message(~filters.me & filters.group)
async def group_respond(client, message):
    if not ai_assistant.config["enabled"]:
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    message_text = message.text or message.caption or ""
    
    if not message_text:
        return
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤
    text_lower = message_text.lower()
    triggered = any(trigger.lower() in text_lower for trigger in ai_assistant.config["trigger_words"])
    
    if triggered and user_id not in ai_assistant.ignore_list:
        await client.send_chat_action(message.chat.id, "typing")
        response = await ai_assistant.generate_response(message_text, user_id, user_name)
        await asyncio.sleep(random.uniform(1, 3))
        
        # –í –≥—Ä—É–ø–ø–∞—Ö –∏–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏
        if random.random() < 0.2:  # 20% —à–∞–Ω—Å –≤ –≥—Ä—É–ø–ø–∞—Ö
            spaced_response = '.'.join(response)
            await message.reply(spaced_response)
        else:
            await message.reply(response)
from pyrogram import Client, filters
from command import fox_command, fox_sudo, who_message
import os
import json
import asyncio
import aiohttp
import time
from datetime import datetime, timedelta
import configparser

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
AI_CONFIG_PATH = "userdata/ai_config.json"
AI_MEMORY_PATH = "userdata/ai_memory.json"
AI_IGNORE_PATH = "userdata/ai_ignore.json"

class AIAssistant:
    def __init__(self):
        self.config = self.load_config()
        self.memory = self.load_memory()
        self.ignore_list = self.load_ignore_list()
        self.conversation_contexts = {}
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        default_config = {
            "api_key": "",
            "api_provider": "google",  # google, openai, claude
            "model": "gemini-pro",
            "max_tokens": 1000,
            "temperature": 0.7,
            "global_prompt": "–¢—ã —É–º–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.",
            "enabled": False,
            "respond_to_mentions": True,
            "respond_to_replies": True,
            "response_chance": 100  # –ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        }
        
        if os.path.exists(AI_CONFIG_PATH):
            try:
                with open(AI_CONFIG_PATH, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    for key, value in default_config.items():
                        if key not in config:
                            config[key] = value
                    return config
            except:
                pass
        
        return default_config
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        os.makedirs(os.path.dirname(AI_CONFIG_PATH), exist_ok=True)
        with open(AI_CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(self.config, f, ensure_ascii=False, indent=2)
    
    def load_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å AI"""
        if os.path.exists(AI_MEMORY_PATH):
            try:
                with open(AI_MEMORY_PATH, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return {}
    
    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å AI"""
        os.makedirs(os.path.dirname(AI_MEMORY_PATH), exist_ok=True)
        with open(AI_MEMORY_PATH, 'w', encoding='utf-8') as f:
            json.dump(self.memory, f, ensure_ascii=False, indent=2)
    
    def load_ignore_list(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if os.path.exists(AI_IGNORE_PATH):
            try:
                with open(AI_IGNORE_PATH, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return []
    
    def save_ignore_list(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        os.makedirs(os.path.dirname(AI_IGNORE_PATH), exist_ok=True)
        with open(AI_IGNORE_PATH, 'w', encoding='utf-8') as f:
            json.dump(self.ignore_list, f, ensure_ascii=False, indent=2)
    
    def add_to_memory(self, user_id, message, response):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        if str(user_id) not in self.memory:
            self.memory[str(user_id)] = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
        if len(self.memory[str(user_id)]) >= 20:
            self.memory[str(user_id)] = self.memory[str(user_id)][-19:]
        
        self.memory[str(user_id)].append({
            "timestamp": time.time(),
            "user_message": message,
            "ai_response": response
        })
        self.save_memory()
    
    def get_user_context(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user_memory = self.memory.get(str(user_id), [])
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = user_memory[-5:] if len(user_memory) > 5 else user_memory
        
        context = ""
        for msg in recent_messages:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
            if time.time() - msg["timestamp"] < 7200:
                context += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user_message']}\n–í—ã: {msg['ai_response']}\n\n"
        
        return context
    
    async def generate_response(self, user_message, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        if not self.config.get("api_key") or not self.config.get("enabled"):
            return None
        
        context = self.get_user_context(user_id)
        
        full_prompt = f"""{self.config['global_prompt']}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
{context}

–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        
        try:
            if self.config["api_provider"] == "google":
                return await self._generate_google_response(full_prompt)
            elif self.config["api_provider"] == "openai":
                return await self._generate_openai_response(full_prompt)
            # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        except Exception as e:
            print(f"AI Error: {e}")
            return None
    
    async def _generate_google_response(self, prompt):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Google AI"""
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.config['model']}:generateContent?key={self.config['api_key']}"
        
        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }],
            "generationConfig": {
                "temperature": self.config["temperature"],
                "maxOutputTokens": self.config["max_tokens"]
            }
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["candidates"][0]["content"]["parts"][0]["text"]
                else:
                    print(f"Google AI API Error: {response.status}")
                    return None
    
    async def _generate_openai_response(self, prompt):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI"""
        url = "https://api.openai.com/v1/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {self.config['api_key']}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": self.config.get("model", "gpt-3.5-turbo"),
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": self.config["max_tokens"],
            "temperature": self.config["temperature"]
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    return data["choices"][0]["message"]["content"]
                else:
                    print(f"OpenAI API Error: {response.status}")
                    return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ai_assistant = AIAssistant()

@Client.on_message(fox_command("aiprompt", "AI Prompt", os.path.basename(__file__), "[text]") & fox_sudo())
async def set_ai_prompt(client, message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
    message = await who_message(client, message)
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current_prompt = ai_assistant.config.get('global_prompt', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        await message.edit(f"ü§ñ **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç AI:**\n\n`{current_prompt}`\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.aiprompt [–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç]`")
        return
    
    new_prompt = args[1]
    ai_assistant.config['global_prompt'] = new_prompt
    ai_assistant.save_config()
    
    await message.edit(f"‚úÖ **–ü—Ä–æ–º–ø—Ç AI –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n**–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:**\n`{new_prompt}`")

@Client.on_message(fox_command("aikey", "AI Key", os.path.basename(__file__), "[api_key]") & fox_sudo())
async def set_ai_key(client, message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –¥–ª—è AI"""
    message = await who_message(client, message)
    
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if ai_assistant.config.get('api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await message.edit(f"üîë **–°—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞:** {status}\n\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `.aikey [–≤–∞—à_api_–∫–ª—é—á]`")
        return
    
    api_key = args[1]
    ai_assistant.config['api_key'] = api_key
    ai_assistant.save_config()
    
    await message.edit("‚úÖ **API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**")
    await asyncio.sleep(2)
    await message.delete()  # –£–¥–∞–ª—è–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

@Client.on_message(fox_command("aiconfig", "AI Config", os.path.basename(__file__), "[provider/model/temp/tokens] [value]") & fox_sudo())
async def ai_config(client, message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    message = await who_message(client, message)
    
    args = message.text.split()
    if len(args) < 2:
        config = ai_assistant.config
        status = "üü¢ –í–∫–ª—é—á–µ–Ω" if config.get('enabled') else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        
        text = f"""ü§ñ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞**

**–°—Ç–∞—Ç—É—Å:** {status}
**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** {config.get('api_provider', 'google')}
**–ú–æ–¥–µ–ª—å:** {config.get('model', 'gemini-pro')}
**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {config.get('temperature', 0.7)}
**–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:** {config.get('max_tokens', 1000)}
**–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:** {'‚úÖ' if config.get('respond_to_mentions') else '‚ùå'}
**–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç—ã:** {'‚úÖ' if config.get('respond_to_replies') else '‚ùå'}
**–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞:** {config.get('response_chance', 100)}%

**–ö–æ–º–∞–Ω–¥—ã:**
`.aiconfig on/off` - –≤–∫–ª/–≤—ã–∫–ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
`.aiconfig provider google/openai` - –ø—Ä–æ–≤–∞–π–¥–µ—Ä API
`.aiconfig model [–Ω–∞–∑–≤–∞–Ω–∏–µ]` - –º–æ–¥–µ–ª—å AI
`.aiconfig temp [0.1-2.0]` - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
`.aiconfig tokens [—á–∏—Å–ª–æ]` - –º–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤"""

        await message.edit(text)
        return
    
    param = args[1].lower()
    
    if param in ['on', 'enable']:
        ai_assistant.config['enabled'] = True
        ai_assistant.save_config()
        await message.edit("‚úÖ **AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–∫–ª—é—á–µ–Ω!**")
    
    elif param in ['off', 'disable']:
        ai_assistant.config['enabled'] = False
        ai_assistant.save_config()
        await message.edit("üî¥ **AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–∫–ª—é—á–µ–Ω!**")
    
    elif param == 'provider' and len(args) > 2:
        provider = args[2].lower()
        if provider in ['google', 'openai']:
            ai_assistant.config['api_provider'] = provider
            if provider == 'google':
                ai_assistant.config['model'] = 'gemini-pro'
            elif provider == 'openai':
                ai_assistant.config['model'] = 'gpt-3.5-turbo'
            ai_assistant.save_config()
            await message.edit(f"‚úÖ **–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:** {provider}")
        else:
            await message.edit("‚ùå **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:** google, openai")
    
    elif param == 'model' and len(args) > 2:
        model = args[2]
        ai_assistant.config['model'] = model
        ai_assistant.save_config()
        await message.edit(f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:** {model}")
    
    elif param in ['temp', 'temperature'] and len(args) > 2:
        try:
            temp = float(args[2])
            if 0.1 <= temp <= 2.0:
                ai_assistant.config['temperature'] = temp
                ai_assistant.save_config()
                await message.edit(f"‚úÖ **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** {temp}")
            else:
                await message.edit("‚ùå **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 2.0**")
        except ValueError:
            await message.edit("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã**")
    
    elif param == 'tokens' and len(args) > 2:
        try:
            tokens = int(args[2])
            if 1 <= tokens <= 4000:
                ai_assistant.config['max_tokens'] = tokens
                ai_assistant.save_config()
                await message.edit(f"‚úÖ **–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:** {tokens}")
            else:
                await message.edit("‚ùå **–¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 4000**")
        except ValueError:
            await message.edit("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤**")

@Client.on_message(fox_command("aiignore", "AI Ignore", os.path.basename(__file__), "[add/del/list] [user_id/reply]") & fox_sudo())
async def ai_ignore(client, message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    message = await who_message(client, message)
    
    args = message.text.split()
    if len(args) < 2:
        await message.edit("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`.aiignore add [user_id]` - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–≥–Ω–æ—Ä\n`.aiignore del [user_id]` - —É–±—Ä–∞—Ç—å –∏–∑ –∏–≥–Ω–æ—Ä–∞\n`.aiignore list` - —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö")
        return
    
    action = args[1].lower()
    
    if action == 'list':
        if not ai_assistant.ignore_list:
            await message.edit("üìù **–°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø—É—Å—Ç–æ–π**")
        else:
            ignore_text = "üö´ **–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
            for user_id in ai_assistant.ignore_list:
                ignore_text += f"‚Ä¢ `{user_id}`\n"
            await message.edit(ignore_text)
    
    elif action == 'add':
        user_id = None
        
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        elif len(args) > 2:
            try:
                user_id = int(args[2])
            except ValueError:
                await message.edit("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**")
                return
        
        if user_id:
            if user_id not in ai_assistant.ignore_list:
                ai_assistant.ignore_list.append(user_id)
                ai_assistant.save_ignore_list()
                await message.edit(f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä**")
            else:
                await message.edit("‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥–Ω–æ—Ä–µ**")
        else:
            await message.edit("‚ùå **–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ**")
    
    elif action in ['del', 'remove']:
        user_id = None
        
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        elif len(args) > 2:
            try:
                user_id = int(args[2])
            except ValueError:
                await message.edit("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**")
                return
        
        if user_id:
            if user_id in ai_assistant.ignore_list:
                ai_assistant.ignore_list.remove(user_id)
                ai_assistant.save_ignore_list()
                await message.edit(f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` —É–±—Ä–∞–Ω –∏–∑ –∏–≥–Ω–æ—Ä–∞**")
            else:
                await message.edit("‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥–Ω–æ—Ä–µ**")
        else:
            await message.edit("‚ùå **–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ**")

@Client.on_message(fox_command("aimemory", "AI Memory", os.path.basename(__file__), "[clear/stats] [user_id]") & fox_sudo())
async def ai_memory(client, message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é AI"""
    message = await who_message(client, message)
    
    args = message.text.split()
    if len(args) < 2:
        total_users = len(ai_assistant.memory)
        total_messages = sum(len(msgs) for msgs in ai_assistant.memory.values())
        
        await message.edit(f"""üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ AI:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏:** {total_users}
üí¨ **–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}

**–ö–æ–º–∞–Ω–¥—ã:**
`.aimemory clear` - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å
`.aimemory clear [user_id]` - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`.aimemory stats [user_id]` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è""")
        return
    
    action = args[1].lower()
    
    if action == 'clear':
        if len(args) > 2:
            # –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_id = args[2]
                if user_id in ai_assistant.memory:
                    del ai_assistant.memory[user_id]
                    ai_assistant.save_memory()
                    await message.edit(f"‚úÖ **–ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –æ—á–∏—â–µ–Ω–∞**")
                else:
                    await message.edit("‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏**")
            except:
                await message.edit("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**")
        else:
            # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å
            ai_assistant.memory = {}
            ai_assistant.save_memory()
            await message.edit("‚úÖ **–í—Å—è –ø–∞–º—è—Ç—å AI –æ—á–∏—â–µ–Ω–∞**")
    
    elif action == 'stats' and len(args) > 2:
        user_id = args[2]
        if user_id in ai_assistant.memory:
            user_msgs = ai_assistant.memory[user_id]
            msg_count = len(user_msgs)
            
            if user_msgs:
                first_msg = datetime.fromtimestamp(user_msgs[0]['timestamp']).strftime('%d.%m.%Y %H:%M')
                last_msg = datetime.fromtimestamp(user_msgs[-1]['timestamp']).strftime('%d.%m.%Y %H:%M')
            else:
                first_msg = last_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            await message.edit(f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`:**

üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏:** {msg_count}
üìÖ **–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {first_msg}
üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {last_msg}""")
        else:
            await message.edit("‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏**")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI
@Client.on_message(filters.text & ~filters.bot & ~filters.me)
async def ai_message_handler(client, message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not ai_assistant.config.get('enabled'):
            return
        
        if not ai_assistant.config.get('api_key'):
            return
        
        if message.from_user.id in ai_assistant.ignore_list:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await client.get_me()
        
        should_respond = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç–∞
        if ai_assistant.config.get('respond_to_mentions') and me.username:
            if f"@{me.username}" in message.text.lower():
                should_respond = True
        
        if ai_assistant.config.get('respond_to_replies') and message.reply_to_message:
            if message.reply_to_message.from_user.id == me.id:
                should_respond = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        if me.first_name and me.first_name.lower() in message.text.lower():
            should_respond = True
        
        if not should_respond:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
        import random
        if random.randint(1, 100) > ai_assistant.config.get('response_chance', 100):
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
        await client.send_chat_action(message.chat.id, "typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        ai_response = await ai_assistant.generate_response(message.text, message.from_user.id)
        
        if ai_response:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            sent_message = await message.reply(ai_response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            ai_assistant.add_to_memory(message.from_user.id, message.text, ai_response)
    
    except Exception as e:
        print(f"AI Handler Error: {e}")
