import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckSquare, Copy, ExternalLink, AlertTriangle } from "lucide-react";
import { useState } from "react";

export function RobloxInstructions() {
  const [copiedServer, setCopiedServer] = useState(false);
  const [copiedClient, setCopiedClient] = useState(false);

  const serverScript = `-- –ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ ServerScriptService
-- –í–ê–ñ–ù–û: –í–∫–ª—é—á–∏—Ç–µ "Allow HTTP Requests" –≤ Game Settings > Security!

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
local SERVER_URL = "https://–≤–∞—à–µ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.replit.app"
local POLL_INTERVAL = 3

-- –°–æ–∑–¥–∞–µ–º RemoteEvent –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
local notificationEvent = Instance.new("RemoteEvent")
notificationEvent.Name = "TelegramNotification" 
notificationEvent.Parent = ReplicatedStorage

local lastMessageId = ""

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
local function sendNotificationToPlayers(message, sender)
    local displaySender = sender or "Admin"
    local formattedMessage = "[üì± Telegram] " .. displaySender .. ": " .. message
    
    for _, player in pairs(Players:GetPlayers()) do
        notificationEvent:FireClient(player, {
            message = formattedMessage,
            title = "Telegram Message",
            sender = displaySender
        })
    end
    
    print("[Telegram Bot] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " .. #Players:GetPlayers() .. " –∏–≥—Ä–æ–∫–∞–º:", message)
end

-- –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
local function pollForMessages()
    pcall(function()
        local url = SERVER_URL .. "/api/roblox/poll"
        local success, response = pcall(function()
            return HttpService:GetAsync(url)
        end)
        
        if success then
            local data = HttpService:JSONDecode(response)
            
            if data and data.messages then
                for _, messageData in pairs(data.messages) do
                    if messageData.id ~= lastMessageId then
                        sendNotificationToPlayers(messageData.content, messageData.sender)
                        lastMessageId = messageData.id
                    end
                end
            end
        else
            warn("[Telegram Bot] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        end
    end)
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
spawn(function()
    print("=== TELEGRAM BOT INTEGRATION ===")
    print("[Telegram Bot] –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    while true do
        pollForMessages()
        wait(POLL_INTERVAL)
    end
end)`;

  const clientScript = `-- –ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ StarterPlayer/StarterPlayerScripts

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local SoundService = game:GetService("SoundService")

local player = Players.LocalPlayer
local notificationEvent = ReplicatedStorage:WaitForChild("TelegramNotification")

-- –ó–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
local notificationSound = Instance.new("Sound")
notificationSound.SoundId = "rbxasset://sounds/electronicpingshort.wav"
notificationSound.Volume = 0.5
notificationSound.Parent = SoundService

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram
notificationEvent.OnClientEvent:Connect(function(data)
    local message = data.message
    local title = data.title or "Telegram Message"
    
    -- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notificationSound:Play()
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = message;
        Duration = 8;
        Icon = "rbxassetid://13560193391";
        Button1 = "OK";
    })
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = message;
        Color = Color3.fromRGB(0, 136, 204);
        Font = Enum.Font.GothamBold;
    })
    
    print("[Telegram] " .. message)
end)

print("[Telegram Client] –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")`;

  const copyToClipboard = (text: string, type: 'server' | 'client') => {
    navigator.clipboard.writeText(text).then(() => {
      if (type === 'server') {
        setCopiedServer(true);
        setTimeout(() => setCopiedServer(false), 2000);
      } else {
        setCopiedClient(true);
        setTimeout(() => setCopiedClient(false), 2000);
      }
    });
  };

  return (
    <Card className="bg-secondary border-gray-700">
      <CardHeader>
        <CardTitle className="text-xl font-bold text-white flex items-center gap-2">
          üéÆ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ Roblox
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <Alert className="bg-red-900/20 border-red-600">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription className="text-red-200">
            <strong>–í–∞–∂–Ω–æ:</strong> –í Game Settings –≤–∫–ª—é—á–∏—Ç–µ "Allow HTTP Requests" –≤ —Ä–∞–∑–¥–µ–ª–µ Security, –∏–Ω–∞—á–µ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!
          </AlertDescription>
        </Alert>

        <div className="space-y-4">
          <div className="flex items-center gap-2 text-green-400">
            <CheckSquare className="h-5 w-5" />
            <span className="font-semibold">–®–∞–≥ 1: –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–ø—Ç</span>
          </div>
          
          <div className="bg-gray-900 rounded-lg p-4">
            <div className="flex items-center justify-between mb-3">
              <span className="text-sm text-gray-400">
                –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ ServerScriptService
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => copyToClipboard(serverScript, 'server')}
                className="text-xs"
              >
                <Copy className="h-3 w-3 mr-1" />
                {copiedServer ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
            </div>
            <pre className="text-xs text-gray-300 overflow-x-auto whitespace-pre-wrap max-h-32">
              {serverScript.substring(0, 300)}...
            </pre>
          </div>
        </div>

        <div className="space-y-4">
          <div className="flex items-center gap-2 text-green-400">
            <CheckSquare className="h-5 w-5" />
            <span className="font-semibold">–®–∞–≥ 2: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç</span>
          </div>
          
          <div className="bg-gray-900 rounded-lg p-4">
            <div className="flex items-center justify-between mb-3">
              <span className="text-sm text-gray-400">
                –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ StarterPlayer/StarterPlayerScripts
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => copyToClipboard(clientScript, 'client')}
                className="text-xs"
              >
                <Copy className="h-3 w-3 mr-1" />
                {copiedClient ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
              </Button>
            </div>
            <pre className="text-xs text-gray-300 overflow-x-auto whitespace-pre-wrap max-h-32">
              {clientScript.substring(0, 300)}...
            </pre>
          </div>
        </div>

        <div className="space-y-4">
          <div className="flex items-center gap-2 text-blue-400">
            <CheckSquare className="h-5 w-5" />
            <span className="font-semibold">–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL</span>
          </div>
          
          <Alert className="bg-blue-900/20 border-blue-600">
            <AlertDescription className="text-blue-200">
              <strong>–ü–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</strong> –∑–∞–º–µ–Ω–∏—Ç–µ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ —Å—Ç—Ä–æ–∫—É:
              <br />
              <code className="bg-blue-800 px-2 py-1 rounded">
                SERVER_URL = "https://–≤–∞—à–µ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.replit.app"
              </code>
              <br />
              –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            </AlertDescription>
          </Alert>
        </div>

        <div className="pt-4 border-t border-gray-600">
          <h4 className="text-white font-semibold mb-3">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</h4>
          <ul className="space-y-2 text-gray-300 text-sm">
            <li className="flex items-center gap-2">
              <CheckSquare className="h-4 w-4 text-green-400" />
              –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </li>
            <li className="flex items-center gap-2">
              <CheckSquare className="h-4 w-4 text-green-400" />
              –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–º —á–∞—Ç–µ
            </li>
            <li className="flex items-center gap-2">
              <CheckSquare className="h-4 w-4 text-green-400" />
              –ë—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </li>
            <li className="flex items-center gap-2">
              <CheckSquare className="h-4 w-4 text-green-400" />
              –í—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
            </li>
          </ul>
        </div>

        <div className="flex gap-3">
          <Button
            asChild
            variant="outline"
            className="flex-1"
          >
            <a 
              href="https://create.roblox.com/docs/reference/engine/classes/HttpService" 
              target="_blank" 
              rel="noopener noreferrer"
              className="flex items-center gap-2"
            >
              <ExternalLink className="h-4 w-4" />
              –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Roblox
            </a>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}