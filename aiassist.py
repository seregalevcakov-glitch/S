from pyrogram import Client, filters
from command import fox_command, fox_sudo, who_message
import os
import asyncio
import json
import google.generativeai as genai
from datetime import datetime
from requirements_installer import install_library

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import google.generativeai as genai
except ImportError:
    install_library("google-generativeai")
    import google.generativeai as genai

class AIAssistant:
    def __init__(self):
        self.api_key = None
        self.model = None
        self.global_prompt = "–¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        self.memory = {}  # {user_id: [messages]}
        self.ignored_users = set()
        self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á
            if os.path.exists("userdata/ai_api_key"):
                with open("userdata/ai_api_key", "r", encoding="utf-8") as f:
                    self.api_key = f.read().strip()
                    if self.api_key:
                        genai.configure(api_key=self.api_key)
                        self.model = genai.GenerativeModel('gemini-pro')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if os.path.exists("userdata/ai_global_prompt"):
                with open("userdata/ai_global_prompt", "r", encoding="utf-8") as f:
                    self.global_prompt = f.read().strip()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–º—è—Ç—å
            if os.path.exists("userdata/ai_memory.json"):
                with open("userdata/ai_memory.json", "r", encoding="utf-8") as f:
                    self.memory = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç
            if os.path.exists("userdata/ai_ignored_users.json"):
                with open("userdata/ai_ignored_users.json", "r", encoding="utf-8") as f:
                    self.ignored_users = set(json.load(f))
        except Exception as e:
            print(f"Error loading AI settings: {e}")
    
    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª"""
        try:
            with open("userdata/ai_memory.json", "w", encoding="utf-8") as f:
                json.dump(self.memory, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving memory: {e}")
    
    def save_ignored_users(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç –≤ —Ñ–∞–π–ª"""
        try:
            with open("userdata/ai_ignored_users.json", "w", encoding="utf-8") as f:
                json.dump(list(self.ignored_users), f, indent=2)
        except Exception as e:
            print(f"Error saving ignored users: {e}")
    
    def add_to_memory(self, user_id, user_message, ai_response):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.memory:
            self.memory[user_id] = []
        
        self.memory[user_id].append({
            "timestamp": datetime.now().isoformat(),
            "user": user_message,
            "ai": ai_response
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.memory[user_id]) > 50:
            self.memory[user_id] = self.memory[user_id][-50:]
        
        self.save_memory()
    
    def get_context(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.memory:
            return ""
        
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = self.memory[user_id][-10:]
        context = ""
        
        for msg in recent_messages:
            context += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user']}\n–¢—ã: {msg['ai']}\n\n"
        
        return context
    
    async def generate_response(self, user_id, user_message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        if not self.api_key or not self.model:
            return "‚ùå AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .aikey –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞."
        
        try:
            context = self.get_context(user_id)
            full_prompt = f"{self.global_prompt}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{context}\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            
            response = self.model.generate_content(full_prompt)
            ai_response = response.text
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.add_to_memory(user_id, user_message, ai_response)
            
            return ai_response
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ai = AIAssistant()

@Client.on_message(fox_command("aikey", "Set AI API Key", os.path.basename(__file__), "[api_key]") & fox_sudo())
async def set_ai_key(client, message):
    message = await who_message(client, message)
    
    try:
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á: .aikey YOUR_API_KEY")
            return
        
        api_key = command_parts[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')
        test_response = model.generate_content("–ü—Ä–∏–≤–µ—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
        with open("userdata/ai_api_key", "w", encoding="utf-8") as f:
            f.write(api_key)
        
        ai.api_key = api_key
        ai.model = model
        
        await message.edit("‚úÖ AI API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
        await asyncio.sleep(3)
        await message.delete()
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª—é—á–∞: {str(e)}")

@Client.on_message(fox_command("aiprompt", "Set AI Global Prompt", os.path.basename(__file__), "[prompt]") & fox_sudo())
async def set_ai_prompt(client, message):
    message = await who_message(client, message)
    
    try:
        command_parts = message.text.split(" ", 1)
        if len(command_parts) < 2:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç: .aiprompt –í–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            return
        
        new_prompt = command_parts[1].strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
        with open("userdata/ai_global_prompt", "w", encoding="utf-8") as f:
            f.write(new_prompt)
        
        ai.global_prompt = new_prompt
        
        await message.edit(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\n{new_prompt}")
        await asyncio.sleep(5)
        await message.delete()
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(fox_command("aimemory", "Manage AI Memory", os.path.basename(__file__), "[clear/stats]") & fox_sudo())
async def manage_ai_memory(client, message):
    message = await who_message(client, message)
    
    try:
        command_parts = message.text.split()
        
        if len(command_parts) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
            total_users = len(ai.memory)
            total_messages = sum(len(msgs) for msgs in ai.memory.values())
            
            stats = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ AI:**\n\n"
            stats += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {total_users}\n"
            stats += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            stats += f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ai.ignored_users)}\n\n"
            stats += f"**–ö–æ–º–∞–Ω–¥—ã:**\n"
            stats += f"`.aimemory clear` - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å\n"
            stats += f"`.aimemory stats` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            await message.edit(stats)
            return
        
        action = command_parts[1].lower()
        
        if action == "clear":
            ai.memory = {}
            ai.save_memory()
            await message.edit("‚úÖ –ü–∞–º—è—Ç—å AI –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")
        
        elif action == "stats":
            total_users = len(ai.memory)
            total_messages = sum(len(msgs) for msgs in ai.memory.values())
            
            stats = f"üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            stats += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            stats += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n\n"
            
            if total_users > 0:
                stats += "**–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
                user_stats = [(user_id, len(msgs)) for user_id, msgs in ai.memory.items()]
                user_stats.sort(key=lambda x: x[1], reverse=True)
                
                for i, (user_id, msg_count) in enumerate(user_stats[:5]):
                    stats += f"{i+1}. ID {user_id}: {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            await message.edit(stats)
        
        else:
            await message.edit("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: clear, stats")
            
        await asyncio.sleep(5)
        await message.delete()
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@Client.on_message(fox_command("aiignore", "Manage AI Ignore List", os.path.basename(__file__), "[add/remove/list] [user_id]") & fox_sudo())
async def manage_ai_ignore(client, message):
    message = await who_message(client, message)
    
    try:
        command_parts = message.text.split()
        
        if len(command_parts) < 2:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: .aiignore [add/remove/list] [user_id]")
            return
        
        action = command_parts[1].lower()
        
        if action == "list":
            if not ai.ignored_users:
                await message.edit("üìù –°–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            else:
                ignored_list = "üö´ **–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
                for user_id in ai.ignored_users:
                    ignored_list += f"‚Ä¢ ID: {user_id}\n"
                await message.edit(ignored_list)
        
        elif action in ["add", "remove"]:
            if len(command_parts) < 3:
                await message.edit(f"‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: .aiignore {action} [user_id]")
                return
            
            try:
                user_id = int(command_parts[2])
            except ValueError:
                await message.edit("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
            
            if action == "add":
                ai.ignored_users.add(user_id)
                ai.save_ignored_users()
                await message.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç")
            
            elif action == "remove":
                if user_id in ai.ignored_users:
                    ai.ignored_users.remove(user_id)
                    ai.save_ignored_users()
                    await message.edit(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞")
                else:
                    await message.edit(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ")
        
        else:
            await message.edit("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: add, remove, list")
            
        await asyncio.sleep(3)
        await message.delete()
        
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
@Client.on_message(filters.text & ~filters.bot & ~filters.me)
async def ai_auto_response(client, message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ AI
        if not ai.api_key or not ai.model:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç
        if message.from_user.id in ai.ignored_users:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ –∫ –±–æ—Ç—É
        me = await client.get_me()
        bot_username = me.username.lower() if me.username else ""
        bot_first_name = me.first_name.lower() if me.first_name else ""
        
        message_text = message.text.lower()
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI
        triggers = [
            bot_username,
            bot_first_name,
            "–∞–π", "ai", "–±–æ—Ç", "bot",
            "–æ—Ç–≤–µ—Ç—å", "—Å–∫–∞–∂–∏", "–ø–æ–º–æ–≥–∏"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        should_respond = any(trigger in message_text for trigger in triggers if trigger)
        
        # –¢–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ä–µ–ø–ª–∞–∏ –∫ –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
        if message.reply_to_message and message.reply_to_message.from_user.id == me.id:
            should_respond = True
        
        if not should_respond:
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await ai.generate_response(message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply(response)
        
    except Exception as e:
        print(f"AI auto-response error: {e}")
