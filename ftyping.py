
from pyrogram import Client
from command import fox_command, fox_sudo, who_message
import os
import re


def format_with_dots(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è—è —Ç–æ—á–∫–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏"""
    if not text:
        return text

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã)
    formatted = '.'.join(char for char in text)

    return formatted


@Client.on_message(fox_command("getmsg", "Get Messages", os.path.basename(__file__), "[count]") & fox_sudo())
async def get_messages(client, message):
    message = await who_message(client, message)
    from prefix import my_prefix

    try:
        count_str = message.text.replace(f'{my_prefix()}getmsg', '').strip()
        count = int(count_str) if count_str else 10

        if not 1 <= count <= 100:
            await message.edit("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            return

        messages = [msg async for msg in client.get_chat_history(777000, limit=count)]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = f"üì¢ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram:**\n\n"

        for i, msg in enumerate(messages, 1):
            date = msg.date.strftime("%d.%m.%Y %H:%M")
            text = msg.text if msg.text else "[–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]"

            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 100:
                text = text[:100] + "..."

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç—ã —Å —Ç–æ—á–∫–∞–º–∏
            formatted_text = format_with_dots(text)

            result += f"**{i}.** `{date}`\n{formatted_text}\n\n"

        await message.edit(result)

    except ValueError:
        await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@Client.on_message(fox_command("getlast", "Get Last Message", os.path.basename(__file__)) & fox_sudo())
async def get_last_message(client, message):
    message = await who_message(client, message)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async for msg in client.get_chat_history(777000, limit=1):
            date = msg.date.strftime("%d.%m.%Y %H:%M:%S")
            text = msg.text if msg.text else "[–º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–∞–º–∏
            formatted_text = format_with_dots(text)

            result = f"üì¢ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:**\n\n"
            result += f"üìÖ **–î–∞—Ç–∞:** `{date}`\n\n"
            result += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{formatted_text}\n\n"
            result += f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é](https://t.me/telegram/{msg.id})"
            await message.edit(result)

    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@Client.on_message(fox_command("forward", "Forward Message", os.path.basename(__file__), "[chat_id] [message_id]") & fox_sudo())
async def forward_message(client, message):
    message = await who_message(client, message)
    from prefix import my_prefix

    try:
        args = message.text.split(maxsplit=2)
        chat_id = args[1]
        message_id = int(args[2])

        await client.forward_messages(chat_id, 777000, message_id)
        await message.edit(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {message_id} —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 777000 –≤ {chat_id}")

    except ValueError:
        await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ ID —á–∞—Ç–∞.")
    except IndexError:
        await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@Client.on_message(fox_command("forwardall", "Forward All Messages", os.path.basename(__file__), "[chat_id]") & fox_sudo())
async def forward_all_messages(client, message):
    message = await who_message(client, message)
    from prefix import my_prefix

    try:
        args = message.text.split(maxsplit=1)
        chat_id = args[1]

        forwarded_count = 0
        async for msg in client.get_chat_history(777000, limit=None):
            try:
                await client.forward_messages(chat_id, 777000, msg.id)
                forwarded_count += 1
            except Exception as e:
                print(f"Error forwarding message {msg.id}: {e}")

        await message.edit(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {forwarded_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram")

    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {str(e)}")


@Client.on_message(fox_command("dottext", "Dot Text", os.path.basename(__file__), "[text]") & fox_sudo())
async def dot_text_format(client, message):
    message = await who_message(client, message)

    try:
        from prefix import my_prefix
        args = message.text.replace(f'{my_prefix()}dottext', '').strip()

        if not args:
            if message.reply_to_message and message.reply_to_message.text:
                text = message.reply_to_message.text
            else:
                await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
        else:
            text = args

        formatted_text = format_with_dots(text)
        await message.edit(f"‚ú® **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{formatted_text}")

    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

